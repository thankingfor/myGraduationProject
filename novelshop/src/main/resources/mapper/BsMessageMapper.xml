<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vip.bzsy.novelshop.mapper.BsMessageMapper">
  <resultMap id="BaseResultMap" type="vip.bzsy.novelshop.model.BsMessage">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="novelId" jdbcType="INTEGER" property="novelid" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="time" jdbcType="VARCHAR" property="time" />
    <result column="is_ban" jdbcType="INTEGER" property="isBan" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, novelId, uid, content, `time`, is_ban
  </sql>
  <select id="selectByExample" parameterType="vip.bzsy.novelshop.model.BsMessageExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bs_message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bs_message
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from bs_message
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="vip.bzsy.novelshop.model.BsMessageExample">
    delete from bs_message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="vip.bzsy.novelshop.model.BsMessage">
    insert into bs_message (id, novelId, uid, 
      content, `time`, is_ban
      )
    values (#{id,jdbcType=INTEGER}, #{novelid,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, 
      #{content,jdbcType=VARCHAR}, #{time,jdbcType=VARCHAR}, #{isBan,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="vip.bzsy.novelshop.model.BsMessage">
    insert into bs_message
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="novelid != null">
        novelId,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="time != null">
        `time`,
      </if>
      <if test="isBan != null">
        is_ban,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="novelid != null">
        #{novelid,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=VARCHAR},
      </if>
      <if test="isBan != null">
        #{isBan,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="vip.bzsy.novelshop.model.BsMessageExample" resultType="java.lang.Integer">
    select count(*) from bs_message
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bs_message
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.novelid != null">
        novelId = #{record.novelid,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        `time` = #{record.time,jdbcType=VARCHAR},
      </if>
      <if test="record.isBan != null">
        is_ban = #{record.isBan,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bs_message
    set id = #{record.id,jdbcType=INTEGER},
      novelId = #{record.novelid,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=INTEGER},
      content = #{record.content,jdbcType=VARCHAR},
      `time` = #{record.time,jdbcType=VARCHAR},
      is_ban = #{record.isBan,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="vip.bzsy.novelshop.model.BsMessage">
    update bs_message
    <set>
      <if test="novelid != null">
        novelId = #{novelid,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        `time` = #{time,jdbcType=VARCHAR},
      </if>
      <if test="isBan != null">
        is_ban = #{isBan,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="vip.bzsy.novelshop.model.BsMessage">
    update bs_message
    set novelId = #{novelid,jdbcType=INTEGER},
      uid = #{uid,jdbcType=INTEGER},
      content = #{content,jdbcType=VARCHAR},
      `time` = #{time,jdbcType=VARCHAR},
      is_ban = #{isBan,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!--List<GetCommentRes> getComment(Integer novelId);-->
  <select id="getComment" resultType="vip.bzsy.novelshop.model.vo.GetCommentRes">
    SELECT m.id id,m.uid uid,u.name name,m.content content,m.time `time` FROM `bs_message` m , `bs_user` u
    WHERE m.uid = u.id AND m.novelId = #{novelId}
    ORDER BY `time` DESC
  </select>
</mapper>